name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: [created, released, deleted]
  workflow_dispatch: 

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check code
        run: cargo check

      - name: Run tests
        run: cargo test

      # - name: MSRV
      #   run: |
      #     rustup component add rustfmt
      #     cargo install cargo-msrv
      #     cargo msrv --check

      # - name: Install clippy
      #   run: rustup component and clippy

      # - name: Run clippy
      #   uses: actions-rs/clippy-check@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     args: --all-features

  build:
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] 
        rust: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      
      - name: post-rust-install on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-msrv
          cargo install cargo-script
          cargo install cargo-deb
          cargo install cargo-rpm
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: post-rust-install on Windows
        if: matrix.os == 'windows-latest'
        run: |
          cargo install cargo-msrv
          cargo install cargo-script
          cargo install cargo-wix 
          rustup target add x86_64-pc-windows-msvc

      - name: post-rust-install on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo install cargo-msrv
          cargo install cargo-script
          cargo install cargo-bundle
          brew install FiloSottile/musl-cross/musl-cross
          rustup target add aarch64-unknown-linux-musl
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: tag to version on Linux/macOS
        if: matrix.os != 'windows-latest' && github.event_name == 'release' #&& github.event.action == 'published'
        run: |
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          cargo script 

      - name: tag to version on Windows
        if: matrix.os == 'windows-latest' && github.event_name == 'release' #&& github.event.action == 'published'
        run: |
          echo "VERSION=$env:GITHUB_REF" >> $env:GITHUB_ENV
          echo $env:VERSION

      - name: Build on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cargo build --release --target aarch64-unknown-linux-gnu

      - name: Build on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --release -vv --target x86_64-apple-darwin
          cargo build --release -vv --target aarch64-unknown-linux-musl

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: check environment
        run: tree target

      - name: Run tests on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo test --release --target x86_64-unknown-linux-gnu
# Do I need QEMU for aarch64 tests?

      - name: Run tests on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo test --release --target x86_64-apple-darwin
# Do I need QEMU for aarch64 tests?

      - name: Run tests on Windows
        if: matrix.os == 'windows-latest'
        run: cargo test --release --target x86_64-pc-windows-msvc


# here we build the packages for the os-es ...

# then we upload the artifacts

# then we deploy  the rpm/deb/msi packages
# and what about pip & conda
# and what about uploading to crates.io ?

     

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/checkout@v2

