name: CI/CD Pipeline

on:
  push:
    branches:
      - masster
  pull_request:
    branches:
      - master
  release:
    types: [created, released, deleted]
  workflow_dispatch: 

jobs:
  # check the msrv AFTER (successful) build!
  # msrv:
  #   name: Check MSRV
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Rust & check MSRV
  #       run: rustup component add rustfmt
  #       run: cargo install cargo-msrv
  #       run: cargo msrv --check


  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   needs: msrv
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Rust & clippye
  #       run: rustup component and clippy

  #     - name: Run clippy
  #       uses: actions-rs/clippy-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         args: --all-features

  build:
    runs-on: ${{ matrix.os }}
    # needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] 
        rust: [stable]
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust on linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.arch }}-unknown-linux-gnu
          components: rustfmt, clippy, cargo, rust-std, rustc
      
      - name: post-rust-install on linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-deb
          cargo install cargo-rpm  

      - name: Install Rust on windows
        if: matrix.os == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.arch }}-pc-windows-msvc
          components: rustfmt, clippy, cargo, rust-std, rustc

      - name: post-rust-install on windows
        if: matrix.os == 'windows-latest'
        run: |
          cargo install cargo-wix 

      - name: Install Rust on macOS
        if: matrix.os == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.arch }}-apple-darwin
          components: rustfmt, clippy, cargo, rust-std, rustc

      - name: post-rust-install on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo install cargo-bundle
      

      # - name: Install Rust on linux/x86_64
        # if: matrix.arch == 'x64'



        #        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.rust }}


      # - name: Build
      #   run: cargo build --release #--target ${{ matrix.arch }}

      # - name: Run tests
      #   run: cargo test --release #--target ${{ matrix.arch }}

      # - name: Install WiX Toolset on Windows
      #   if: matrix.os == 'windows-latest'
      #   run: choco install wixtoolset
  
      # - name: Install cargo-wix on Windows
      #   if: matrix.os == 'windows-latest'
      #   run: cargo install cargo-wix
  
      # - name: Build MSI package on Windows
      #   if: matrix.os == 'windows-latest'
      #   run: cargo wix
  
      # - name: Upload MSI artifacts on Windows
      #   if: matrix.os == 'windows-latest'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.os }}-msi
      #     path: target/wix/*.msi
      #     retention-days: 1

      # - name: Install cargo-deb on Ubuntu
      #   if: matrix.os == 'ubuntu-latest'
      #   run: cargo install cargo-deb
    
      # - name: Build Debian package on Ubuntu
      #   if: matrix.os == 'ubuntu-latest'
      #   run: cargo deb

      # - name: Show target directory contents
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo apt-get install -y tree
      #     tree target

      # - name: Upload debian artifacts on Ubuntu
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.os }}-deb
      #     path: target/debian/**/*
      #     retention-days: 1

  # package:


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/checkout@v2