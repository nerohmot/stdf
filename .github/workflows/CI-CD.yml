name: CI/CD Pipeline

on:
  push:
    branches:
      - masster
  pull_request:
    branches:
      - master
  release:
    types: [created, released, deleted]
  workflow_dispatch: 

jobs:
  # check the msrv AFTER (successful) build!
  # msrv:
  #   name: Check MSRV
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Rust & check MSRV
  #       run: rustup component add rustfmt
  #       run: cargo install cargo-msrv
  #       run: cargo msrv --check


  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   needs: msrv
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Rust & clippye
  #       run: rustup component and clippy

  #     - name: Run clippy
  #       uses: actions-rs/clippy-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         args: --all-features

  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run tests
        run: cargo test

  build:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Build
        run: cargo build --release

      - name: Run tests
        run: cargo test --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: myproject

  # package:


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable

  #     - name: Build
  #       run: cargo build --release

  #     - name: Deploy to Production
  #       env:
  #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #         SERVER: ${{ secrets.SERVER }}
  #         USER: ${{ secrets.USER }}
  #       run: |
  #         echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  #         ssh -o StrictHostKeyChecking=no $USER@$SERVER "mkdir -p ~/deployments/myproject"
  #         scp target/release/myproject $USER@$SERVER:~/deployments/myproject/
  #         ssh $USER@$SERVER "sudo systemctl restart myproject"